import pandas as pd

#import important libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
from sklearn import preprocessing
from sklearn import metrics
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
from plotly.offline import init_notebook_mode
init_notebook_mode(connected=True)
import warnings
warnings.filterwarnings("ignore")

df1 = pd.read_csv("/content/drive/MyDrive/1- mental-illnesses-prevalence.csv")

df2 = pd.read_csv("/content/drive/MyDrive/3- adult-population-covered-in-primary-data-on-the-prevalence-of-major-depression.csv")

df3 = pd.read_csv("/content/drive/MyDrive/6- depressive-symptoms-across-us-population.csv")

df4 = pd.read_csv("/content/drive/MyDrive/7- number-of-countries-with-primary-data-on-prevalence-of-mental-illnesses-in-the-global-burden-of-disease-study.csv")

df1.head()

df2.head()

df3.head()

df4.head()

df1.describe()

df2.describe()

df3.describe()

df4.describe()

df1.isna().sum()

df1.drop('Code', axis=1, inplace=True)


df1.isna().sum()

df2.isna().sum()

df2.drop('Code', axis=1, inplace=True)

df3.isna().sum()

df3.drop('Code', axis=1, inplace=True)

df4.isna().sum()

df4.drop('Code', axis=1, inplace=True)



df1.info()

df1.columns

df2.info()

df2.columns

df3.info()

df3.columns

df4.info()

df4.columns

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns


plt.figure(figsize=(12, 6))
sns.lineplot(data=df1, x='Year', y='Schizophrenia disorders (share of population) - Sex: Both - Age: Age-standardized', label='Schizophrenia')
sns.lineplot(data=df1, x='Year', y='Depressive disorders (share of population) - Sex: Both - Age: Age-standardized', label='Depressive')
sns.lineplot(data=df1, x='Year', y='Anxiety disorders (share of population) - Sex: Both - Age: Age-standardized', label='Anxiety')
sns.lineplot(data=df1, x='Year', y='Bipolar disorders (share of population) - Sex: Both - Age: Age-standardized', label='Bipolar')
sns.lineplot(data=df1, x='Year', y='Eating disorders (share of population) - Sex: Both - Age: Age-standardized', label='Eating')
plt.xlabel('Year')
plt.ylabel('Share of Population (%)')
plt.title('Trends in Mental Disorders Over Time')
plt.legend()
plt.show()


plt.figure(figsize=(10, 5))
sns.lineplot(data=df2, x='Year', y='Major depression')
plt.xlabel('Year')
plt.ylabel('Major Depression (%)')
plt.title('Trends in Major Depression Over Time')
plt.show()


df3.set_index('Entity')[['Nearly every day', 'More than half the days', 'Several days', 'Not at all']].plot(kind='bar', stacked=True, figsize=(10, 6))
plt.xlabel('Entity')
plt.ylabel('Percentage (%)')
plt.title('Frequency of Mental Health Issues')
plt.xticks(rotation=45)
plt.legend(title='Frequency')
plt.show()


plt.figure(figsize=(8, 5))
sns.barplot(data=df4, x='Year', y='Number of countries with primary data on prevalence of mental disorders')
plt.xlabel('Year')
plt.ylabel('Number of Countries')
plt.title('Number of Countries with Mental Health Data Over Time')
plt.show()


plt.figure(figsize=(10, 6))
correlation_matrix = df1.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap for Mental Health Disorders (df1)')
plt.show()


plt.figure(figsize=(8, 5))
sns.histplot(df2['Major depression'], bins=15, kde=True)
plt.xlabel('Major Depression (%)')
plt.ylabel('Frequency')
plt.title('Distribution of Major Depression (df2)')
plt.show()


df3.set_index('Entity')[['Nearly every day', 'More than half the days', 'Several days', 'Not at all']].plot(kind='bar', stacked=True, figsize=(10, 6))
plt.xlabel('Entity')
plt.ylabel('Percentage (%)')
plt.title('Frequency of Mental Health Issues (df3)')
plt.xticks(rotation=45)
plt.legend(title='Frequency')
plt.show()


plt.figure(figsize=(8, 5))
sns.barplot(data=df4, x='Year', y='Number of countries with primary data on prevalence of mental disorders')
plt.xlabel('Year')
plt.ylabel('Number of Countries')
plt.title('Number of Countries with Mental Health Data Over Time (df4)')
plt.show()


# Selecting a subset of columns for pairplot, as all variables won't fit in one plot
subset_cols = ['Schizophrenia disorders (share of population) - Sex: Both - Age: Age-standardized',
               'Depressive disorders (share of population) - Sex: Both - Age: Age-standardized',
               'Anxiety disorders (share of population) - Sex: Both - Age: Age-standardized']

sns.pairplot(df1[subset_cols])
plt.suptitle('Pairplot for Mental Health Disorders (df1)', y=1.02)
plt.show()


plt.figure(figsize=(10, 6))
sns.lineplot(data=df2, x='Year', y='Major depression', marker='o', markersize=8, color='royalblue')
plt.xlabel('Year')
plt.ylabel('Major Depression (%)')
plt.title('Trends in Major Depression (df2)')
plt.grid()
plt.show()


plt.figure(figsize=(10, 6))
sns.boxplot(data=df3.melt(id_vars=['Entity', 'Year']), x='variable', y='value')
plt.xlabel('Frequency')
plt.ylabel('Percentage (%)')
plt.title('Box Plot of Frequency of Mental Health Issues (df3)')
plt.xticks(rotation=45)
plt.show()


plt.figure(figsize=(10, 6))
sns.scatterplot(data=df4, x='Year', y='Number of countries with primary data on prevalence of mental disorders', hue='Entity', palette='viridis')
plt.xlabel('Year')
plt.ylabel('Number of Countries')
plt.title('Scatter Plot for Number of Countries with Mental Health Data Over Time (df4)')
plt.legend(title='Entity')
plt.show()


from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score


import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Having that df2 contains the data for the Major depression prediction task
X = df2[['Year']]  # Features
y = df2['Major depression']  # Target variable

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


# Create a Linear Regression model
model = LinearRegression()

# Fit the model on the training data
model.fit(X_train, y_train)


# Make predictions on the test data
y_pred = model.predict(X_test)



# Evaluate the model
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse}")
print(f"R-squared: {r2}")

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import KFold
from sklearn import metrics
import pandas as pd

# Normalize the features
features = ['Schizophrenia disorders (share of population) - Sex: Both - Age: Age-standardized', 'Depressive disorders (share of population) - Sex: Both - Age: Age-standardized', 'Anxiety disorders (share of population) - Sex: Both - Age: Age-standardized', 'Bipolar disorders (share of population) - Sex: Both - Age: Age-standardized']
X_model = df1[features]
y_model = df1["Eating disorders (share of population) - Sex: Both - Age: Age-standardized"]

scaler = StandardScaler()
X_model_norm = scaler.fit_transform(X_model)
X_model_norm

# Simple Linear Regression
X_train, X_test, y_train, y_test = train_test_split(X_model_norm, y_model, test_size=0.2, random_state=42)
print("Shape of X_train:", X_train.shape)
print("Shape of y_train:", y_train.shape)
print("Shape of X_test:", X_test.shape)
print("Shape of y_test:", y_test.shape)

linear_regression_model = LinearRegression()
linear_regression_model.fit(X_train, y_train)

y_pred = linear_regression_model.predict(X_test)

print("Mean Absolute Error of Model is:", metrics.mean_absolute_error(y_test, y_pred))
print("Mean Squared Error of Model is:", metrics.mean_squared_error(y_test, y_pred))
print("Root Mean Squared of Model is:", np.sqrt(metrics.mean_squared_error(y_test, y_pred)))
print("R2 Score of Model is:", metrics.r2_score(y_test, y_pred))

k_fold = KFold(10)
print("Cross-Validation Scores:", cross_val_score(linear_regression_model, X_model_norm, y_model.ravel(), cv=k_fold, n_jobs=1))


# Higher Dimension Linear Regression
def check(Dimension, test_size):
    r2 = 0.6289
    for column in X_model:
        New_Col_name = column + str(Dimension)
        New_Col_value = X_model[column]**Dimension
        X_model.insert(0, New_Col_name, New_Col_value)
        X_train, X_test, y_train, y_test = train_test_split(X_model, y_model, test_size=test_size, random_state=0)
        New_model = LinearRegression()
        New_model.fit(X_train, y_train)
        y_pred = New_model.predict(X_test)
        r2_new = metrics.r2_score(y_test, y_pred)
        if r2_new < r2:
            X_model.drop([New_Col_name], axis=1, inplace=True)
        else:
            r2 = r2_new
    print("R2 score is:", r2)


check(2, 0.2)
print(X_model)


# Dot Model
Bipolar_Anx = X_model["Bipolar disorders (share of population) - Sex: Both - Age: Age-standardized"] * X_model["Anxiety disorders (share of population) - Sex: Both - Age: Age-standardized"]
Bipolar_Anx2 = X_model["Bipolar disorders (share of population) - Sex: Both - Age: Age-standardized2"] * X_model["Anxiety disorders (share of population) - Sex: Both - Age: Age-standardized2"]
Dep_Schi = X_model["Depressive disorders (share of population) - Sex: Both - Age: Age-standardized"] * X_model["Schizophrenia disorders (share of population) - Sex: Both - Age: Age-standardized"]
Dep_Schi2 = X_model["Depressive disorders (share of population) - Sex: Both - Age: Age-standardized2"] * X_model["Schizophrenia disorders (share of population) - Sex: Both - Age: Age-standardized2"]


X_model.insert(0, "Bipolar_Anx", Bipolar_Anx)
X_model.insert(0, "Bipolar_Anx2", Bipolar_Anx2)
X_model.insert(0, "Dep_Schi", Dep_Schi)
X_model.insert(0, "Dep_Schi2", Dep_Schi2)

X_train, X_test, y_train, y_test = train_test_split(X_model, y_model, test_size=0.2, random_state=0)
Model = LinearRegression()
Model.fit(X_train, y_train)
y_pred = Model.predict(X_test)
r2 = metrics.r2_score(y_test, y_pred)
print(r2)


# Display Model's Output
a = X_test["Bipolar disorders (share of population) - Sex: Both - Age: Age-standardized"]
b = y_test
c = X_test["Bipolar disorders (share of population) - Sex: Both - Age: Age-standardized"]
d = y_pred


font1 = {'family': 'fantasy', 'color': 'blue', 'size': 20}
font2 = {'family': 'serif', 'color': 'darkred', 'size': 20}
font3 = {'family': 'cursive', 'color': 'green', 'size': 20}


plt.figure(figsize=(20, 10), dpi=200)
plt.title("Bipolar Prediction", fontdict=font2)
plt.xlabel("Bipolar", fontdict=font3)
plt.ylabel("Eating", fontdict=font1)
plt.xticks(fontsize=15)
plt.yticks(fontsize=15)
plt.scatter(a, b, color='blue', label="Real Values")
plt.scatter(c, d, color='maroon', label="Predicted Values", marker="H", s=80)
plt.legend(fontsize=15)
plt.show()


# Display Model's Output
a = X_test["Depressive disorders (share of population) - Sex: Both - Age: Age-standardized"]
b = y_test
c = X_test["Depressive disorders (share of population) - Sex: Both - Age: Age-standardized"]
d = y_pred

plt.figure(figsize=(20, 10), dpi=200)
plt.title("Depressive disorders  Prediction", fontdict=font2)
plt.xlabel("Depressive disorders", fontdict=font3)
plt.ylabel("Eating", fontdict=font1)
plt.xticks(fontsize=15)
plt.yticks(fontsize=15)
plt.scatter(a, b, color='blue', label="Real Values")
plt.scatter(c, d, color='maroon', label="Predicted Values", marker="H", s=80)
plt.legend(fontsize=15)
plt.show()

# Display Model's Output
a = X_test["Schizophrenia disorders (share of population) - Sex: Both - Age: Age-standardized"]
b = y_test
c = X_test["Schizophrenia disorders (share of population) - Sex: Both - Age: Age-standardized"]
d = y_pred

plt.figure(figsize=(20, 10), dpi=200)
plt.title("Schizophrenia disorders  Prediction", fontdict=font2)
plt.xlabel("Schizophrenia disorders", fontdict=font3)
plt.ylabel("Eating", fontdict=font1)
plt.xticks(fontsize=15)
plt.yticks(fontsize=15)
plt.scatter(a, b, color='blue', label="Real Values")
plt.scatter(c, d, color='maroon', label="Predicted Values", marker="H", s=80)
plt.legend(fontsize=15)
plt.show()

# Display Model's Output
a = X_test["Anxiety disorders (share of population) - Sex: Both - Age: Age-standardized2"]
b = y_test
c = X_test["Anxiety disorders (share of population) - Sex: Both - Age: Age-standardized2"]
d = y_pred

plt.figure(figsize=(20, 10), dpi=200)
plt.title("Anxiety disorders Prediction", fontdict=font2)
plt.xlabel("Anxiety disorders", fontdict=font3)
plt.ylabel("Eating", fontdict=font1)
plt.xticks(fontsize=15)
plt.yticks(fontsize=15)
plt.scatter(a, b, color='blue', label="Real Values")
plt.scatter(c, d, color='maroon', label="Predicted Values", marker="H", s=80)
plt.legend(fontsize=15)
plt.show()
